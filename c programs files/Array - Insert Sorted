// P // This is a program to Insert an element into an SORTED array.
// A // Basic Algorithm is to find the accurate position of element by comparing this other elements and inserting an element at that position.

// 1 // Firstly include the header files into our program.
// P //
#include <stdio.h>

// 2 // Now we give the Function Prototype of our "insert_sorted()". Function Prototype : A Function Prototype or Function Interface is a declaration of a function that specifies the function's name and type signature (arity, parameter types, and return type), but omits the function body. - Wikipedia.org
    - void is the return type of our function insert_sorted is the name of function and contain no arguments.
// P //
void insert_sorted();

// 3 // Initializing Global variables i.e. with the scope all over the program.
-> int array[50] - Initialise an array named "array" which can contain upto 50 elements.
->size - Variable used for storing number of elements user want to enter.
-> item - An element that is to be inserted.
// P //
int array[50], size, item;

// 4 // main function with Int as return type and no arguments and Now we will work inside Main()
// P // int main(void) { return 0; }
int main(void) {
    
    
    // 5 // Initialize i to 0 - To be used in Loop
    // P //
    int i = 0;
    
    // 6 // Take an input from user about the size of array.
    // P //
    printf("\nEnter size of an array: ");
    scanf("%d", &size);
    
    // 7 // Now ask the user to enter the Sorted Elements in an array. Loop is used to store numbers into an array and i is used as an Index value.
    // P //
    printf("\nEnter sorted elements of an array:\n");
    for(i=0; i<size; i++)
        scanf("%d", &array[i]);
    
    // 8 // Ask user for the Item to be inserted in an array.
    // P //
    printf("\nEnter ITEM to insert: ");
    scanf("%d", &item);
    
    // 9 // Call the function "insert_sorted"
    // P //
    insert_sorted();
    
    // 10 // Now after function calling we will print the array with the element insert into it.
    // P //
    printf("\n\nAfter insertion:\n");
    for(i=0; i<size; i++)
        printf("\n%d", array[i]);
    return 0;
}

// 11 // Now we will come out of the Main block and Define our function.
// P // void insert_sorted() {
// Statements;
}
void insert_sorted()
{
    // 12 // Inside insert_sorted(). Initialize i with size - 1 (Reason for (-1): As index in array starts from 0.
    // P //
    int i = size-1;
    
    // 13 // Looping through each element in the array from the last element to the first and checking if our item is smaller or not. If the item is smaller the array element then shift the backward (to the next index)
    // P //
    while(item<array[i] && i>=0)
    {
        array[i+1] = array[i];
        i--;
    }
    
    // 14 // Loop will terminate as soon as we get the postion where the element is to inserted. Now we insert the element at that position. In the program we are using i+1 because in the end of the loop we decremented the i.    // P //
    array[i+1] = item;

    // 15 //At last we are incrementing the size because after inserting the size of the array is incremented.
    // P //
    size++;
}